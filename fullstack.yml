---
- hosts: localhost
  connection: local
  gather_facts: False
  become: true
  tasks:

    - name: Webserver Instances
      ec2:
        key_name: frankfurt
        instance_type: t2.micro
        image: ami-194cdc76
        wait: yes
        wait_timeout: 500
        count: 1
        instance_tags:
          for: summit
          role: webserver
          Name: webserverbyansible
          tagger: factlookup
        user_data: "{{ lookup('file', 'webserver.sh') }}"
        monitoring: no
        vpc_subnet_id: subnet-33b7b74b
        group_id: sg-b2c11adf
        assign_public_ip: yes
        region: 'eu-central-1'
        state: present
      register: ec2web

    - name: Database Instances
      ec2:
        key_name: frankfurt
        instance_type: t2.micro
        image: ami-194cdc76
        wait: yes
        wait_timeout: 500
        count: 1
        instance_tags:
          for: summit
          role: database
          Name: databasebyansible
          tagger: factlookup
        user_data: "{{ lookup('file', 'database.sh') }}"
        monitoring: no
        vpc_subnet_id: subnet-33b7b74b
        group_id: sg-b2c11adf
        assign_public_ip: yes
        region: 'eu-central-1'
        state: present
      register: ec2db

    - name: get ec2 instance id by its name tag
      ec2_instance_facts:
        filters:
          "tag:tagger": "factlookup"
          instance-state-name: running
      register: instances

    - name: Add new instance to host group
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: ansiblecreated
      with_items: "{{ ec2web.instances }}"

    - name: Add new instance to host group
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: ansiblecreated
      with_items: "{{ ec2db.instances }}"


    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        delay: 60
        timeout: 600
        state: started
      with_items: "{{ ec2web.instances }}"

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        delay: 60
        timeout: 600
        state: started
      with_items: "{{ ec2db.instances }}"

- name: Configure instance(s)
  hosts: ansiblecreated
  user: ec2-user
  become: True
  gather_facts: True
  roles:
      - { role: "common.summit" }
